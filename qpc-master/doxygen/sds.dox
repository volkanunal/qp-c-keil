/*! @page sds_toc SDS

<h1>Software Design Specification (SDS)</h1>
<p>This document specifies the design of the **QP/C active object framework**. This document describes the intended features of the QP/C framework, as well as the interfaces to other software, hardware, and various other technical dependencies. The quick links to the main sections of this SDS are given below:
</p>

- @subpage sds_intro
  + @ref sds_purpose
  + @ref sds_conv
  + @ref sds_scope
  + @ref sds_audience
  + @ref sds_refs
- @subpage sds_over
  + @ref sds_req
  + @ref sds_arch
- @subpage sds_viewpoints
  + @ref sds_context
  + @ref sds_composition
  + @ref sds_logical
  + @ref sds_dependency
  + @ref sds_information
  + @ref sds_use
  + @ref sds_interface
  + @ref sds_structure
  + @ref sds_interaction
  + @ref sds_state
  + @ref sds_algorithm
  + @ref sds_resource
- @subpage sds
  + @ref sds_mod
    - @ref sds_qf
    - @ref sds_qep
    - @ref sds_qv
    - @ref sds_qk
    - @ref sds_qxk

@next{sds_intro}
*/
/*##########################################################################*/
/*! @page sds_intro Introduction

@section sds_purpose Purpose
<strong>QP/C</strong> (Quantum Platform in C) is a lightweight software @termref{framework, framework} for building responsive and modular real-time embedded applications as systems of cooperating, event-driven  @termref{ao, active objects} (@termref{ao, actors}).



@section sds_conv Document Conventions


@subsection srs_conv_num Numbering of Requirements



@subsection srs_conv_shall Use of "Shall" and "Should"
Requirement definitions use consistent terminology to indicate whether something is mandatory or desirable. _Shall_ is used to denote **mandatory** behavior. _Should_ is used to denote a **desirable** behavior that should typically take place, but might not happen all the time or might be optional in uncommon cases.



@section sds_scope Project Scope



@section sds_audience Intended Audience

This SRS document is primarily intended for **embedded software engineers**, who develop applications based on the QP/C framework.

This SRS can be also of interest to test engineers, software architects, system engineers, quality-assurance engineers, hardware engineers, as well as managers overseeing the software development.



@section sds_refs References


@next{sds_over}
*/
/*##########################################################################*/
/*! @page sds_over Software Overview



@section sds_req Allocation of Requirements




@section sds_arch Software Architecture

@next{sds_viewpoints}
*/
/*##########################################################################*/
/*! @page sds_viewpoints Design Viewpoints



@section sds_context Context Viewpoint



@section sds_composition Composition Viewpoint



@section sds_logical Logical Viewpoint



@section sds_dependency Dependency Viewpoint



@section sds_information Information Viewpoint



@section sds_use Patterns Use Viewpoint



@section sds_interface Interface Viewpoint



@section sds_structure Structure Viewpoint



@section sds_interaction Interaction Viewpoint



@section sds_state State Dynamics Viewpoint



@section sds_algorithm Algorithm Viewpoint



@section sds_resource Resource Viewpoint


@next{sds}
*/
/*##########################################################################*/
/*! @page sds Software Module Description



@section sds_req Allocation of Requirements




@section sds_arch Software Architecture

@next{sds}
*/